[
    {
        "id": "98f04e36.3a6d",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "fd7141d6.f493b",
        "type": "tab",
        "label": "example",
        "disabled": false,
        "info": ""
    },
    {
        "id": "43d68cf7.723a54",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "c6f1c674.61d028",
        "type": "ui_tab",
        "name": "Tab 1",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "a3f6904d.ff3a4",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "c6f1c674.61d028",
        "order": 1,
        "disp": true,
        "width": "40",
        "collapse": false
    },
    {
        "id": "237da972.5d69a6",
        "type": "ui_group",
        "name": "ui-table with commands",
        "tab": "379a501f.53b59",
        "order": 1,
        "disp": true,
        "width": "17",
        "collapse": false
    },
    {
        "id": "c91332c0.50c11",
        "type": "ui_group",
        "name": "commands",
        "tab": "379a501f.53b59",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "379a501f.53b59",
        "type": "ui_tab",
        "name": "ui-table command",
        "icon": "fa-table",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "ee116574.f1f048",
        "type": "inject",
        "z": "98f04e36.3a6d",
        "name": "set startup message",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "node-red-RC-controller flow successfully started",
        "payloadType": "str",
        "x": 180,
        "y": 40,
        "wires": [
            [
                "6c5aa1bc.4a843",
                "50f93e8d.4482f"
            ]
        ]
    },
    {
        "id": "6c5aa1bc.4a843",
        "type": "debug",
        "z": "98f04e36.3a6d",
        "name": "write startup message to console.",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 40,
        "wires": []
    },
    {
        "id": "dd6aff29.bea9f",
        "type": "daemon",
        "z": "98f04e36.3a6d",
        "name": "cat out",
        "command": "cat",
        "args": "/var/lirc_raw_data/lirc0_events",
        "autorun": true,
        "cr": false,
        "redo": true,
        "op": "lines",
        "closer": "SIGKILL",
        "x": 140,
        "y": 200,
        "wires": [
            [
                "f3583679.ec0d38",
                "379f349c.70463c"
            ],
            [],
            []
        ]
    },
    {
        "id": "f3583679.ec0d38",
        "type": "debug",
        "z": "98f04e36.3a6d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 180,
        "wires": []
    },
    {
        "id": "379f349c.70463c",
        "type": "change",
        "z": "98f04e36.3a6d",
        "name": "parse input",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "(\t  $splitted:=payload~>$split(' ');\t  $type := $splitted[0];\t  {\t     \"type\":$splitted[0],\t     \"duration_microsec\" : $splitted[1]~>$number()\t  };\t  $is_valid := ($type=\"pulse\") or ($type=\"space\");\t  $is_valid \t  ?{\t     \"type\":$type,\t     \"duration_microsec\" : $splitted[1]~>$number()\t    }\t  :{\t     \"type\": \"invalid\",\t     \"input\": payload\t  }\t)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 210,
        "y": 300,
        "wires": [
            [
                "a38879ad.617888"
            ]
        ]
    },
    {
        "id": "a38879ad.617888",
        "type": "switch",
        "z": "98f04e36.3a6d",
        "name": "is invalid",
        "property": "payload.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "invalid",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 200,
        "y": 360,
        "wires": [
            [
                "4f74baee.afb814"
            ],
            [
                "eb0f5023.a7bc7",
                "d9963875.299d18",
                "a047b1c6.f640c"
            ]
        ]
    },
    {
        "id": "4f74baee.afb814",
        "type": "debug",
        "z": "98f04e36.3a6d",
        "name": "invalid input",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 280,
        "wires": []
    },
    {
        "id": "eb0f5023.a7bc7",
        "type": "debug",
        "z": "98f04e36.3a6d",
        "name": "valid input",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 320,
        "wires": []
    },
    {
        "id": "d9963875.299d18",
        "type": "switch",
        "z": "98f04e36.3a6d",
        "name": "",
        "property": "payload.duration_microsec",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "2000",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 430,
        "y": 360,
        "wires": [
            [
                "a2a7e6a4.50c168"
            ]
        ]
    },
    {
        "id": "a2a7e6a4.50c168",
        "type": "debug",
        "z": "98f04e36.3a6d",
        "name": "more than 2 msec",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 360,
        "wires": []
    },
    {
        "id": "50f93e8d.4482f",
        "type": "change",
        "z": "98f04e36.3a6d",
        "name": "flow.rc_key = []",
        "rules": [
            {
                "t": "set",
                "p": "rc_key",
                "pt": "flow",
                "to": "[]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "964a261d.f4d158",
        "type": "switch",
        "z": "98f04e36.3a6d",
        "name": "long pulse ?",
        "property": "payload.type = \"pulse\" and payload.duration_microsec > 20000",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 210,
        "y": 500,
        "wires": [
            [
                "b82c52e5.c504b",
                "703e3e93.997c8"
            ]
        ]
    },
    {
        "id": "b82c52e5.c504b",
        "type": "debug",
        "z": "98f04e36.3a6d",
        "name": "end recording",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 500,
        "wires": []
    },
    {
        "id": "a047b1c6.f640c",
        "type": "change",
        "z": "98f04e36.3a6d",
        "name": "append to flow.rc_key",
        "rules": [
            {
                "t": "set",
                "p": "rc_key",
                "pt": "msg",
                "to": "rc_key",
                "tot": "flow"
            },
            {
                "t": "set",
                "p": "rc_key",
                "pt": "flow",
                "to": "[ rc_key, payload ]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 240,
        "y": 440,
        "wires": [
            [
                "964a261d.f4d158"
            ]
        ]
    },
    {
        "id": "703e3e93.997c8",
        "type": "change",
        "z": "98f04e36.3a6d",
        "name": "conv to sequences",
        "rules": [
            {
                "t": "set",
                "p": "rc_key",
                "pt": "msg",
                "to": "rc_key",
                "tot": "flow"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "(\t\t  $long_spaces := rc_key#$i[type = \"space\" and duration_microsec > 10000].$i[];\t  $long_spaces#$i.{\t    \"begin\" : $,\t    \"end\" : $long_spaces[$i+1]~>$exists() \t            ? $long_spaces[$i+1]-1\t            : ($$.rc_key~>$count()) -1\t  }.(\t      $begin := $.begin;\t      $end := $.end;\t      { \"sequence\" :  $$.rc_key#$i[$begin<=$i and $i <= $end] }\t\t    )[]\t)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 230,
        "y": 560,
        "wires": [
            [
                "9081eb14.635a68",
                "d4b684c1.d8d978",
                "ed46f12.cb0141"
            ]
        ]
    },
    {
        "id": "9081eb14.635a68",
        "type": "debug",
        "z": "98f04e36.3a6d",
        "name": "RC sequences",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 560,
        "wires": []
    },
    {
        "id": "d4b684c1.d8d978",
        "type": "change",
        "z": "98f04e36.3a6d",
        "name": "flow.rc_key = []",
        "rules": [
            {
                "t": "set",
                "p": "rc_key",
                "pt": "flow",
                "to": "[]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "a9262f1b.e9dd8",
        "type": "ui_table",
        "z": "98f04e36.3a6d",
        "group": "a3f6904d.ff3a4",
        "name": "",
        "order": 0,
        "width": "40",
        "height": "10",
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 570,
        "y": 680,
        "wires": []
    },
    {
        "id": "bb452bf2.e73f58",
        "type": "change",
        "z": "98f04e36.3a6d",
        "name": "table rows input",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "(payload.{\t  \"sequence\" : sequence#$i.{ \"\" & $i : $.type= \"space\" \t                                          ? - $.duration_microsec \t                                          :$.duration_microsec }~>$merge()\t}).sequence",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 260,
        "y": 700,
        "wires": [
            [
                "a9262f1b.e9dd8",
                "96805ffa.9915d"
            ]
        ]
    },
    {
        "id": "ed46f12.cb0141",
        "type": "change",
        "z": "98f04e36.3a6d",
        "name": "table column formatting",
        "rules": [
            {
                "t": "set",
                "p": "ui_control",
                "pt": "msg",
                "to": "(\t$max_sequence_len := payload.(sequence~>$count())~>$max();\t{\t    \"customHeight\": 18,\t    \"tabulator\": {\t        \"layout\": \"fitDataFill\",\t        \"movableColumns\": false,\t        \"index\": \"id\",\t        \"columns\": [\t            {\t                \"title\": \"ID\",\t                \"field\": \"id\",\t                \"formatter\": \"text\",\t                \"headerTooltip\": \"id number act as row index\"\t            },\t            /* array of RC pulse/spaces */\t             [0.. $max_sequence_len].{\t                \"title\": $~>$string(),\t                \"field\": $~>$string(),\t                \"align\":\"right\",\t                \"formatter\": \"text\"\t             }\t             ]\t    }\t}\t)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 230,
        "y": 640,
        "wires": [
            [
                "a9262f1b.e9dd8",
                "a9fecaf4.6a9338",
                "bb452bf2.e73f58"
            ]
        ]
    },
    {
        "id": "b075d2ac.a69f3",
        "type": "ui_table",
        "z": "fd7141d6.f493b",
        "group": "237da972.5d69a6",
        "name": "",
        "order": 0,
        "width": "17",
        "height": "9",
        "columns": [
            {
                "field": "id",
                "title": "id",
                "width": "",
                "align": "right",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "timestamp",
                "title": "Timestamp",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "text",
                "title": "Text",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 790,
        "y": 440,
        "wires": [
            [
                "588f316.0b070d",
                "76c4495f.da70f8"
            ]
        ]
    },
    {
        "id": "f8a9323b.fedf4",
        "type": "inject",
        "z": "fd7141d6.f493b",
        "name": "add @ top",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 154,
        "y": 338,
        "wires": [
            [
                "eb577b4b.510388"
            ]
        ]
    },
    {
        "id": "b54f6ce8.3b1a4",
        "type": "debug",
        "z": "fd7141d6.f493b",
        "name": "addRow",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 375,
        "y": 440,
        "wires": []
    },
    {
        "id": "eb577b4b.510388",
        "type": "function",
        "z": "fd7141d6.f493b",
        "name": "addRow @ top",
        "func": "var id=flow.get(\"lastId\") || 0;\n++id;\nmsg.payload={\n    command:\"addRow\",\n    arguments: [\n        [\n            {\n            \"id\":id,\n            \"timestamp\":msg.payload,\n            \"text\":\"addRow @ top (#\"+id+\")\"\n            }\n        ],\n        true\n    ],\n    returnPromise: true\n}\nflow.set(\"lastId\",id);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 395,
        "y": 304,
        "wires": [
            [
                "b54f6ce8.3b1a4",
                "b075d2ac.a69f3"
            ]
        ],
        "info": "# addRow([row],onTop)\n\n`onTop=true`\n\nadds a new Row on top of the table"
    },
    {
        "id": "588f316.0b070d",
        "type": "debug",
        "z": "fd7141d6.f493b",
        "name": "response from ui-table",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1095,
        "y": 440,
        "wires": []
    },
    {
        "id": "12606591.7a3dca",
        "type": "inject",
        "z": "fd7141d6.f493b",
        "name": "Init 20 rows",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "20",
        "payloadType": "num",
        "x": 164,
        "y": 168,
        "wires": [
            [
                "d4dce9b4.1f2588"
            ]
        ]
    },
    {
        "id": "d4dce9b4.1f2588",
        "type": "function",
        "z": "fd7141d6.f493b",
        "name": "table with n rows as array",
        "func": "var numberOfRows = msg.payload;\nflow.set(\"lastId\",numberOfRows);\nmsg.payload=[];\nfor (let i=1; i<=numberOfRows; i++) {\n    msg.payload.push({\"id\":i,\"timestamp\":Date.now(),\"text\":\"this is line\"+i})\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 425,
        "y": 134,
        "wires": [
            [
                "b075d2ac.a69f3",
                "f9bfd98.abe1a28",
                "76c4495f.da70f8"
            ]
        ]
    },
    {
        "id": "8254f2d2.eeaa1",
        "type": "function",
        "z": "fd7141d6.f493b",
        "name": "updateOrAddData (add)",
        "func": "var id=flow.get(\"lastId\") || 0;\n++id;\nmsg.payload={\n    command:\"updateOrAddData\",\n    arguments: [\n        [\n            {\n            \"id\":id,\n            \"timestamp\":msg.payload,\n            \"text\":\"updateOrAddData (add) (#\"+id+\")\"\n            }\n        ]\n    ],\n    returnPromise: true\n}\nflow.set(\"lastId\",id);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 425,
        "y": 491,
        "wires": [
            [
                "570e922d.1d465c",
                "b075d2ac.a69f3"
            ]
        ],
        "info": "# updateOrAddData([row])\n\nadds a the row with a new id (same as addRow)"
    },
    {
        "id": "cbd6baa0.fa7d78",
        "type": "inject",
        "z": "fd7141d6.f493b",
        "name": "add",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 144,
        "y": 525,
        "wires": [
            [
                "8254f2d2.eeaa1"
            ]
        ]
    },
    {
        "id": "570e922d.1d465c",
        "type": "debug",
        "z": "fd7141d6.f493b",
        "name": "updateOrAddData",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 405,
        "y": 610,
        "wires": []
    },
    {
        "id": "782ab41e.cbb66c",
        "type": "inject",
        "z": "fd7141d6.f493b",
        "name": "add @ end",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 154,
        "y": 423,
        "wires": [
            [
                "760fde70.028f"
            ]
        ]
    },
    {
        "id": "760fde70.028f",
        "type": "function",
        "z": "fd7141d6.f493b",
        "name": "addRow @ end",
        "func": "var id=flow.get(\"lastId\") || 0;\n++id;\nmsg.payload={\n    command:\"addRow\",\n    arguments: [\n        [\n            {\n            \"id\":id,\n            \"timestamp\":msg.payload,\n            \"text\":\"addRow @ end (#\"+id+\")\"\n            }\n        ],\n        false\n    ],\n    returnPromise: true\n}\nflow.set(\"lastId\",id);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 395,
        "y": 389,
        "wires": [
            [
                "b54f6ce8.3b1a4",
                "b075d2ac.a69f3"
            ]
        ],
        "info": "# addRow([row],onTop)\n\n`onTop=false`\n\nadds a new Row on top of the table"
    },
    {
        "id": "deeff963.289f08",
        "type": "function",
        "z": "fd7141d6.f493b",
        "name": "updateOrAddData (update)",
        "func": "var id=flow.get(\"lastId\") || 0;\nif (id<2) {\n    node.error(\"use only if minimum of 2 Lines existing!\")\n    return;\n}\n\nid=Math.floor(id/2); //\nmsg.payload={\n    command:\"updateOrAddData\",\n    arguments: [\n        [\n            {\n            \"id\":id,\n            \"timestamp\":msg.payload,\n            \"text\":\"updateOrAddData (update) (#\"+id+\")\"\n            }\n        ]\n    ],\n    returnPromise: true\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 435,
        "y": 559,
        "wires": [
            [
                "570e922d.1d465c",
                "b075d2ac.a69f3"
            ]
        ],
        "info": "# updateOrAddData([row])\n\nupdates a the row with an id in the middle from 1 to lastId, hope it exists!\nIf not a row will be added"
    },
    {
        "id": "557e109d.f9d7e",
        "type": "comment",
        "z": "fd7141d6.f493b",
        "name": "update ui-table by passing the complete tableData as array",
        "info": "",
        "x": 287,
        "y": 83,
        "wires": []
    },
    {
        "id": "6a095f36.8f13a",
        "type": "comment",
        "z": "fd7141d6.f493b",
        "name": "update ui-table by using commands",
        "info": "",
        "x": 217,
        "y": 253,
        "wires": []
    },
    {
        "id": "f08308d6.c66f68",
        "type": "inject",
        "z": "fd7141d6.f493b",
        "name": "update",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 144,
        "y": 593,
        "wires": [
            [
                "deeff963.289f08"
            ]
        ]
    },
    {
        "id": "77b4d006.543ed",
        "type": "function",
        "z": "fd7141d6.f493b",
        "name": "deleteRow",
        "func": "var id=flow.get(\"lastId\") || 0;\nif (id<2) {\n    node.error(\"use only if minimum of 2 Lines existing!\")\n    return;\n}\n\nid=Math.floor(id/2); //\nmsg.payload={\n    command:\"deleteRow\",\n    arguments: [id],\n    returnPromise: true\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 385,
        "y": 712,
        "wires": [
            [
                "e34a75a3.9f0188",
                "b075d2ac.a69f3"
            ]
        ],
        "info": "# deleteRow(row / [rows])\n\n`row=singleId`\n\nor\n\n`row=[array of IDs]` // seems there is a bug/issue in tabulator\n\ndelete a single the row with an id in the middle from 1 to lastId, hope it exists.\n\nWill fail on the second hit if you inject this two times because the id wad deleteted on the first"
    },
    {
        "id": "936c8219.458bc",
        "type": "inject",
        "z": "fd7141d6.f493b",
        "name": "delete",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 144,
        "y": 746,
        "wires": [
            [
                "77b4d006.543ed"
            ]
        ]
    },
    {
        "id": "e34a75a3.9f0188",
        "type": "debug",
        "z": "fd7141d6.f493b",
        "name": "deleteRow",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 385,
        "y": 831,
        "wires": []
    },
    {
        "id": "fafa24f8.577d28",
        "type": "comment",
        "z": "fd7141d6.f493b",
        "name": "deleteRow will punch holes in table!",
        "info": "",
        "x": 217,
        "y": 661,
        "wires": []
    },
    {
        "id": "f9bfd98.abe1a28",
        "type": "debug",
        "z": "fd7141d6.f493b",
        "name": "addRow",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 375,
        "y": 185,
        "wires": []
    },
    {
        "id": "76c4495f.da70f8",
        "type": "function",
        "z": "fd7141d6.f493b",
        "name": "table recorder",
        "func": "var status = {fill:\"red\",shape:\"ring\",text:\"an error occured\"};\nvar success = (msg.topic && msg.topic===\"success\") || false;\nvar tableData = flow.get(\"tableData\");\nif (tableData === undefined) {\n    tableData = [];\n    flow.set(\"tableData\",tableData);\n}\n\n// find the index for a row in tableData for a given index (id)\nfunction checkIndex(id) {\n    let matchRow=-1\n    tableData.forEach(function (row,index){\n        if (row.id === id){\n            matchRow=index;\n            return matchRow;\n        }\n    })\n    return matchRow;\n}\n\n// flat merge one row \nfunction mergeRow(dest,source) {\n    Object.keys(source).forEach(function(key) {\n        dest[key]=source[key];\n    })\n}\n\n//merge or add one or many rows into tableData \nfunction mergeData(newData,toTop) {\n    newData.forEach(function (item,index) {\n        node.warn([\"findIndex\",item]);\n        let row=checkIndex(item.id);\n        if (row<0) { // row do not existst in tableData\n            if (toTop) {\n                tableData.push(item);\n                status.text+=\"newRow @ top\";\n            } else {\n                tableData.unshift(item);\n                status.text+=\"newRow @ bottom\";\n            }\n            return;\n        } else { // row exists so update\n            mergeRow(tableData[row],item);\n            status.text+=\"row updated\";\n            return;\n        }\n        if (status.text!==\"\") node.status(status);\n    });\n}\n\nswitch (typeof msg.payload){\n    case \"string\":\n        node.warn([\"[table recorder] \",(typeof msg.payload),msg.payload]);\n        switch (msg.payload){\n            case \"change\":\n                status={fill:\"green\",shape:\"dot\",text:\"table restored \"+tableData.length+\" rows\"};\n                msg.payload=tableData;\n                break;\n        }\n        break;\n    case \"object\":\n        node.warn([\"[table recorder] \",(typeof msg.payload),msg.payload]);\n        if (Array.isArray(msg.payload)) { // replace all tableData\n            status={fill:\"green\",shape:\"dot\",text:\"table replaced \"+msg.payload.length+\" rows\"};\n            tableData=RED.util.cloneMessage(msg.payload); \n        } else {\n            switch (msg.payload.command) { // clearData does not return a promise!\n                case \"clearData\":\n                    status={fill:\"green\",shape:\"dot\",text:\"clearData: done\"};\n                    tableData=[];\n                    flow.set(\"lastId\",0);\n                    break;                \n            }\n        }\n        break;\n    default: // likely a msg fom a ui-table command or callback\n        if (msg.hasOwnProperty(\"topic\")&&\n            msg.hasOwnProperty(\"ui_control\") && \n            msg.ui_control.hasOwnProperty(\"callback\") &&\n            msg.hasOwnProperty(\"return\")) { // message originates from a ui-table callback\n            if (success) {\n                switch(msg.return.command) {\n                    case \"addRow\":\n                        status.text=\"addRow: \";\n                        mergeData(msg.return.arguments[0],msg.return.arguments[1]);\n                        status.shape=\"dot\";\n                        break;\n                    case \"updateOrAddData\":\n                        status.text=\"updateOrAddData: \";\n                        mergeData(msg.return.arguments[0]);\n                        break;\n                    case \"deleteRow\":\n                        let row=checkIndex(msg.return.arguments[0]);\n                        tableData.splice(row,1);\n                        status.shape=\"dot\";\n                        status.text=\"deleteRow: \"+row+\" deleted\";\n                        break;\n                    default:\n                        status={fill:\"yellow\",shape:\"dot\",text:msg.return.command + \" unknown!\"};\n                        break;         \n                }\n            } else {\n                status.text=msg.topic+\" \"+msg.error;\n            }\n        }\n        break;\n}\nif (success) status.fill=\"green\";\nflow.set(\"tableData\",tableData);\nnode.status(status);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1075,
        "y": 508,
        "wires": [
            [
                "b075d2ac.a69f3"
            ]
        ],
        "icon": "font-awesome/fa-database",
        "info": "# simple ui-table handler\n## abstract\nUsing ui-table with commands offer the hole flexibilty of tabulator. The table can be manipulated down to cell level.\nAs the ui-table node only passes the commands to tabulator and receives promises back the node does not hold the table data. If the data should be available after refresh, tab change, new connections the flow is responsible to cache the data and all the manipulations.\nThis node takes care of most simple data manipulation commands and holds a copy of the data in `flow.context.tabledata`\n\n## details\n\n### row index (id)\n\nTo identify a [row a index](http://tabulator.info/docs/4.5/data#overview) column has to be defined. This colum defaults to `id` but can be changed by specifing a **field** by using `msg.ui_control`. In this example the row index is a simple counter adding up by one if a new line is added.\n\n### addRow command\n\n[details @ tabulator addRow docs](http://tabulator.info/docs/4.5/update#alter-add)\n\nYou can add a row by sending the `addRow` command. You can decide if the row adds on the top or at the bottom of table.\n\n### addOrUpdate command\n\n[details @ tabulator addOrUpdate docs](http://tabulator.info/docs/4.5/update#alter-update)\n\nTo update data the best way is to use the `addOrUpdate` command. If the row indetified by the index is not exeisting a new row will be added automatically\n\n### deleteRow command\n\n[details @ tabulator deleteRow docs](http://tabulator.info/docs/4.5/update#row)\n\nDelete one or more rows (passing an array always results in \"row not found error\"! I think there is an issue in tabulator)\n\n### clearData\n\n[details @ tabulator clearData docs](http://tabulator.info/docs/4.5/update#alter-empty)\n\nunfortunately this command (currently) do not send a promise back! So we have to pass it directly to the table handler"
    },
    {
        "id": "7b1c27f4.36a718",
        "type": "ui_ui_control",
        "z": "fd7141d6.f493b",
        "name": "",
        "events": "all",
        "x": 800,
        "y": 508,
        "wires": [
            [
                "76c4495f.da70f8"
            ]
        ]
    },
    {
        "id": "8b79840b.aff7e8",
        "type": "inject",
        "z": "fd7141d6.f493b",
        "d": true,
        "name": "delete 1-5",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 154,
        "y": 780,
        "wires": [
            [
                "fee8b78d.068f98"
            ]
        ]
    },
    {
        "id": "fee8b78d.068f98",
        "type": "function",
        "z": "fd7141d6.f493b",
        "d": true,
        "name": "delete Rows [2,4,6,8,10]",
        "func": "var id=flow.get(\"lastId\") || 0;\nif (id<10) {\n    node.error(\"use only if minimum of 10 Lines existing!\")\n    return;\n}\n\nid=Math.floor(id/2); //\nmsg.payload={\n    command:\"deleteRow\",\n    arguments: [[2,4,6,8,10]],\n    returnPromise: true\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 425,
        "y": 780,
        "wires": [
            [
                "b075d2ac.a69f3",
                "e34a75a3.9f0188"
            ]
        ],
        "info": "# deleteRow(row / [rows])\n\n`row=singleId`\n\nor\n\n`row=[array of IDs]` // seems there is a bug/issue in tabulator\n\ndelete a single the row with an id in the middle from 1 to lastId, hope it exists.\n\nWill fail on the second hit if you inject this two times because the id wad deleteted on the first"
    },
    {
        "id": "fe4ba122.df8fb",
        "type": "function",
        "z": "fd7141d6.f493b",
        "name": "clearData",
        "func": "\nmsg.payload={\n    command:\"clearData\",\n    arguments: [],\n    returnPromise: true\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 375,
        "y": 950,
        "wires": [
            [
                "6e49e266.f72b6c",
                "b075d2ac.a69f3",
                "76c4495f.da70f8"
            ]
        ],
        "info": "# clear data\n\nunfortunately this command (currently) do not send a promise back! So we have to pass it directly to the table handler"
    },
    {
        "id": "82194704.7ab2d8",
        "type": "inject",
        "z": "fd7141d6.f493b",
        "name": "clear",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 144,
        "y": 984,
        "wires": [
            [
                "fe4ba122.df8fb"
            ]
        ]
    },
    {
        "id": "df623146.8270a",
        "type": "comment",
        "z": "fd7141d6.f493b",
        "name": "Erase all data by using clearData command",
        "info": "",
        "x": 247,
        "y": 899,
        "wires": []
    },
    {
        "id": "6e49e266.f72b6c",
        "type": "debug",
        "z": "fd7141d6.f493b",
        "name": "clearData",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 375,
        "y": 1001,
        "wires": []
    },
    {
        "id": "d404def3.39a63",
        "type": "inject",
        "z": "fd7141d6.f493b",
        "name": "change",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "change",
        "payloadType": "str",
        "x": 790,
        "y": 576,
        "wires": [
            [
                "76c4495f.da70f8"
            ]
        ]
    },
    {
        "id": "36be75f0.115c6a",
        "type": "ui_button",
        "z": "fd7141d6.f493b",
        "name": "",
        "group": "c91332c0.50c11",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Init 20 rows",
        "tooltip": "init table by passing the hole table array (default way)",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "20",
        "payloadType": "num",
        "topic": "",
        "x": 164,
        "y": 134,
        "wires": [
            [
                "d4dce9b4.1f2588"
            ]
        ]
    },
    {
        "id": "b496aa6a.32f2d8",
        "type": "ui_button",
        "z": "fd7141d6.f493b",
        "name": "",
        "group": "c91332c0.50c11",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "add one row @ top",
        "tooltip": "add a new row to the top",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "date",
        "topic": "",
        "x": 184,
        "y": 304,
        "wires": [
            [
                "eb577b4b.510388"
            ]
        ]
    },
    {
        "id": "79d05aaa.e2c7d4",
        "type": "ui_button",
        "z": "fd7141d6.f493b",
        "name": "",
        "group": "c91332c0.50c11",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "add one row @ end",
        "tooltip": "add a new row at the end ",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "date",
        "topic": "",
        "x": 184,
        "y": 389,
        "wires": [
            [
                "760fde70.028f"
            ]
        ]
    },
    {
        "id": "d37bf3a8.373dd",
        "type": "ui_button",
        "z": "fd7141d6.f493b",
        "name": "",
        "group": "c91332c0.50c11",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "addOrUpdate (add)",
        "tooltip": "add a new row by passing a new id",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "date",
        "topic": "",
        "x": 184,
        "y": 491,
        "wires": [
            [
                "8254f2d2.eeaa1"
            ]
        ]
    },
    {
        "id": "d31c2ac7.05bed8",
        "type": "ui_button",
        "z": "fd7141d6.f493b",
        "name": "",
        "group": "c91332c0.50c11",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "addOrUpdate (update)",
        "tooltip": "update the row in the middle (or add if a row with that id not exists)",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "date",
        "topic": "",
        "x": 194,
        "y": 559,
        "wires": [
            [
                "deeff963.289f08"
            ]
        ]
    },
    {
        "id": "c637efb3.9c38c",
        "type": "ui_button",
        "z": "fd7141d6.f493b",
        "name": "",
        "group": "c91332c0.50c11",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "delete (middle)",
        "tooltip": "delate the row with the id=maxId/2. Will result an error if not existing",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "date",
        "topic": "",
        "x": 174,
        "y": 712,
        "wires": [
            [
                "77b4d006.543ed"
            ]
        ]
    },
    {
        "id": "5531f2d0.fb913c",
        "type": "ui_button",
        "z": "fd7141d6.f493b",
        "name": "",
        "group": "c91332c0.50c11",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "clear",
        "tooltip": "clear all table data",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "date",
        "topic": "",
        "x": 144,
        "y": 950,
        "wires": [
            [
                "fe4ba122.df8fb"
            ]
        ]
    },
    {
        "id": "858a6bc2.0384e8",
        "type": "ui_text",
        "z": "fd7141d6.f493b",
        "group": "c91332c0.50c11",
        "order": 9,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "status",
        "format": "{{status.text}}",
        "layout": "col-center",
        "x": 960,
        "y": 746,
        "wires": []
    },
    {
        "id": "213d641a.12a53c",
        "type": "status",
        "z": "fd7141d6.f493b",
        "name": "",
        "scope": [
            "76c4495f.da70f8"
        ],
        "x": 799,
        "y": 746,
        "wires": [
            [
                "858a6bc2.0384e8"
            ]
        ]
    },
    {
        "id": "e7d10007.d6e73",
        "type": "ui_button",
        "z": "fd7141d6.f493b",
        "name": "",
        "group": "c91332c0.50c11",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "refresh (change)",
        "tooltip": "Same as ui-control sending a change message",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "change",
        "payloadType": "str",
        "topic": "",
        "x": 820,
        "y": 542,
        "wires": [
            [
                "76c4495f.da70f8"
            ]
        ]
    },
    {
        "id": "8386c3a7.41ead",
        "type": "inject",
        "z": "fd7141d6.f493b",
        "name": "format table",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 164,
        "y": 1137,
        "wires": [
            [
                "8ae898e7.418068"
            ]
        ]
    },
    {
        "id": "f59e9830.e23608",
        "type": "comment",
        "z": "fd7141d6.f493b",
        "name": "Format Table using ui_control",
        "info": "",
        "x": 197,
        "y": 1052,
        "wires": []
    },
    {
        "id": "19e88f0.0c32071",
        "type": "debug",
        "z": "fd7141d6.f493b",
        "name": "clearData",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 375,
        "y": 1154,
        "wires": []
    },
    {
        "id": "ea064e3c.22437",
        "type": "ui_button",
        "z": "fd7141d6.f493b",
        "name": "",
        "group": "c91332c0.50c11",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "format table",
        "tooltip": "Formats the table using msg.ui_control",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "date",
        "topic": "",
        "topicType": "str",
        "x": 164,
        "y": 1103,
        "wires": [
            [
                "8ae898e7.418068"
            ]
        ]
    },
    {
        "id": "8ae898e7.418068",
        "type": "change",
        "z": "fd7141d6.f493b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "ui_control",
                "pt": "msg",
                "to": "{\"customHeight\":18,\"tabulator\":{\"layout\":\"fitColumns\",\"movableColumns\":false,\"index\":\"id\",\"columns\":[{\"title\":\"ID\",\"field\":\"id\",\"formatter\":\"text\",\"headerTooltip\":\"id number act as row index\"},{\"formatterParams\":{\"outputFormat\":\"HH:mm:ss.SSS\",\"inputFormat\":\"x\",\"invalidPlaceholder\":\"(unknown)\"},\"title\":\"Timestamp\",\"field\":\"timestamp\",\"formatter\":\"datetime\",\"headerTooltip\":\"timestamp of last change\"},{\"title\":\"0\",\"field\":\"0\",\"formatter\":\"text\",\"headerTooltip\":\"last cause of reboot (provided by http json request)\"}]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 405,
        "y": 1103,
        "wires": [
            [
                "19e88f0.0c32071",
                "b075d2ac.a69f3",
                "6bd61b7.a6a56e4"
            ]
        ]
    },
    {
        "id": "6bd61b7.a6a56e4",
        "type": "change",
        "z": "fd7141d6.f493b",
        "name": "change",
        "rules": [
            {
                "t": "delete",
                "p": "ui_control",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "change",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 613,
        "y": 1103,
        "wires": [
            [
                "76c4495f.da70f8"
            ]
        ]
    },
    {
        "id": "96805ffa.9915d",
        "type": "debug",
        "z": "98f04e36.3a6d",
        "name": "table row input",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 760,
        "wires": []
    },
    {
        "id": "a9fecaf4.6a9338",
        "type": "debug",
        "z": "98f04e36.3a6d",
        "name": "table column formatting",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "ui_control",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 640,
        "wires": []
    },
    {
        "id": "cd456e79.bc165",
        "type": "change",
        "z": "98f04e36.3a6d",
        "name": "table column formatting",
        "rules": [
            {
                "t": "set",
                "p": "ui_control",
                "pt": "msg",
                "to": "/* {\t    \"customHeight\": 18,\t    \"tabulator\": {\t        \"layout\": \"fitColumns\",\t        \"movableColumns\": false,\t        \"index\": \"id\",\t        \"columns\": [\t            {\t                \"title\": \"ID\",\t                \"field\": \"id\",\t                \"formatter\": \"text\",\t                \"headerTooltip\": \"id number act as row index\"\t            },\t            {\t                \"formatterParams\": {\t                    \"outputFormat\": \"HH:mm:ss.SSS\",\t                    \"inputFormat\": \"x\",\t                    \"invalidPlaceholder\": \"(unknown)\"\t                },\t                \"title\": \"Timestamp\",\t                \"field\": \"timestamp\",\t                \"formatter\": \"datetime\",\t                \"headerTooltip\": \"timestamp of last change\"\t            },\t            {\t                \"title\": \"Text\",\t                \"field\": \"text\",\t                \"headerTooltip\": \"last cause of reboot (provided by http json request)\"\t            }\t        ]\t    }\t} */\t(\t$max_sequence_len := payload.(sequence~>$count())~>$max();\t{\t    \"customHeight\": 18,\t    \"tabulator\": {\t        /* \"layout\": \"fitColumns\", */\t        \"movableColumns\": false,\t        /* \"index\": \"id\",*/\t        \"columns\": \t             [0.. $max_sequence_len].{\t                \"title\": $~>$string(),\t                \"field\": $~>$string(),\t                \"formatter\": \"text\"\t        }\t    }\t}\t)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "13885dd2.729292",
        "type": "change",
        "z": "fd7141d6.f493b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "ui_control",
                "pt": "msg",
                "to": "{\"customHeight\":18,\"tabulator\":{\"layout\":\"fitColumns\",\"movableColumns\":false,\"index\":\"id\",\"columns\":[{\"title\":\"ID\",\"field\":\"id\",\"formatter\":\"text\",\"headerTooltip\":\"id number act as row index\"},{\"formatterParams\":{\"outputFormat\":\"HH:mm:ss.SSS\",\"inputFormat\":\"x\",\"invalidPlaceholder\":\"(unknown)\"},\"title\":\"Timestamp\",\"field\":\"timestamp\",\"formatter\":\"datetime\",\"headerTooltip\":\"timestamp of last change\"},{\"title\":\"Text\",\"field\":\"text\",\"headerTooltip\":\"last cause of reboot (provided by http json request)\"}]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "2d2ede18.da38e2",
        "type": "change",
        "z": "fd7141d6.f493b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "ui_control",
                "pt": "msg",
                "to": "{\"customHeight\":18,\"tabulator\":{\"layout\":\"fitColumns\",\"movableColumns\":false,\"index\":\"id\",\"columns\":[{\"title\":\"ID\",\"field\":\"id\",\"formatter\":\"text\",\"headerTooltip\":\"id number act as row index\"},{\"formatterParams\":{\"outputFormat\":\"HH:mm:ss.SSS\",\"inputFormat\":\"x\",\"invalidPlaceholder\":\"(unknown)\"},\"title\":\"Timestamp\",\"field\":\"timestamp\",\"formatter\":\"datetime\",\"headerTooltip\":\"timestamp of last change\"},{\"title\":\"Text\",\"field\":\"text\",\"headerTooltip\":\"last cause of reboot (provided by http json request)\"}]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "5b5b442e.6a786c",
        "type": "change",
        "z": "98f04e36.3a6d",
        "name": "table column formatting",
        "rules": [
            {
                "t": "set",
                "p": "ui_control",
                "pt": "msg",
                "to": "{\t    \"customHeight\": 18,\t    \"tabulator\": {\t        \"layout\": \"fitColumns\",\t        \"movableColumns\": false,\t        \"index\": \"id\",\t        \"columns\": [\t            {\t                \"title\": \"ID\",\t                \"field\": \"id\",\t                \"formatter\": \"text\",\t                \"headerTooltip\": \"id number act as row index\"\t            },\t            {\t                \"formatterParams\": {\t                    \"outputFormat\": \"HH:mm:ss.SSS\",\t                    \"inputFormat\": \"x\",\t                    \"invalidPlaceholder\": \"(unknown)\"\t                },\t                \"title\": \"Timestamp\",\t                \"field\": \"timestamp\",\t                \"formatter\": \"datetime\",\t                \"headerTooltip\": \"timestamp of last change\"\t            },\t            {\t                \"title\": \"0\",\t                \"field\": \"0\",\t                \"headerTooltip\": \"last cause of reboot (provided by http json request)\"\t            }\t        ]\t    }\t}\t",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 950,
        "y": 480,
        "wires": [
            []
        ]
    }
]